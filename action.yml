name: 'Open PR to Official Unmanic Repository'
description: 'Generates a PR to the official Unmanic repository from a Git Repository containing a Unmanic Plugin'
inputs:
  dst_repo:
    description: 'The repository to open the PR against'
    required: false
    default: 'Unmanic/unmanic-plugins'
  dst_branch_name:
    description: 'The name of the branch to open the PR against'
    required: false
    default: 'official'
  github_token:
    description: 'A GitHub token with the permissions to push back to this repository'
    required: true
runs:
  using: 'composite'
  steps:

    # Checkout the destination plugin repo
    - name: Checkout destination plugin repo
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.dst_repo }}
        ref: ${{ inputs.dst_branch_name }}
        fetch-depth: 0

    # Checkout plugin source
    - name: Checkout plugin
      uses: actions/checkout@v3
      with:
        path: build/plugin
        submodules: recursive

    # Prepare build environment
    - name: Prepare build environment
      shell: bash
      id: prepare
      run: |
        # Read plugin id and version from info.json
        plugin_id=$(cat build/plugin/info.json | jq -r .id)
        plugin_version=$(cat build/plugin/info.json | jq -r .version)
        echo "plugin_id=${plugin_id}" >> $GITHUB_OUTPUT
        echo "plugin_version=${plugin_version}" >> $GITHUB_OUTPUT

        # Rename plugin directory for building
        rm -rf build/plugin.${plugin_id}
        mv -fv build/plugin build/plugin.${plugin_id}

    # Configure git user for commit messages
    - name: Configure git user
      uses: fregante/setup-git-user@v1

    # Check for plugin updates and create a PR branch with any changes found
    - name: Generate PR branch
      shell: bash
      id: execute
      run: |
        plugin_id="${{ steps.prepare.outputs.plugin_id }}"
        repo_root_path="$(pwd)"
        plugin_location="${repo_root_path}/build/plugin.${plugin_id}"
        mkdir -p "${repo_root_path}/build"

        if [[ -z ${plugin_id} ]]; then
            echo "Unable to determine the ID of your plugin. Is it set in the info.json file?"
            exit 1
        fi


        ########################################################################
        ### CREATE PR BRANCH
        pushd "${repo_root_path}" &> /dev/null
        # Create clean PR branch 
        echo -e "\n*** Checkout clean PR branch for plugin"
        git branch -D "pr-${plugin_id}" 2> /dev/null
        git checkout -b "pr-${plugin_id}"
        popd &> /dev/null


        ########################################################################
        ### UPDATE SUBMODULES
        pushd "${plugin_location}" &> /dev/null
        # Update any submodules
        echo -e "\n*** Pulling plugin submodules"
        git submodule update --init --recursive 
        popd &> /dev/null


        ########################################################################
        ### PATCH PROJECT
        pushd "${plugin_location}" &> /dev/null
        # Apply any patches
        if [[ -d ./patches ]]; then
            echo -e "\n*** Patching project"
            find ./patches -type f -name "*.patch" -exec patch -p1 --input="{}" --forward --verbose \;
        fi
        popd &> /dev/null


        ########################################################################
        ### BUILD/INSTALL SOURCE INTO PR DIR
        pushd "${repo_root_path}" &> /dev/null
        # Install/update plugin files
        echo -e "\n*** Installing files from plugin git repo to this repository's source directory"
        mkdir -p "${repo_root_path}/source/${plugin_id}"
        ls -la "${plugin_location}/"
        rm -rf "${repo_root_path}/source/${plugin_id}"/*
        find "${plugin_location}" \( -type d -or -type f \) | grep -vE '(\.git/|\.github/|\.gitmodules|\.idea/)' | while read -r file; do
            # Construct the relative path
            relative_path="${file#${plugin_location}/}"
            dest_path="${repo_root_path}/source/${plugin_id}/${relative_path}"
            if [ -d "${file}" ]; then
                mkdir -p "${dest_path}"
            elif [ -f "${file}" ]; then
                cp -fv "${file}" "${dest_path}"
            fi
        done
        # Read plugin version
        plugin_version=$(cat "${repo_root_path}/source/${plugin_id}/info.json" | jq -rc '.version')
        [[ ${plugin_version} == "null" ]] && echo "Failed to fetch the plugin's version from the info.json file. Exit!" && exit 1;
        popd &> /dev/null


        ########################################################################
        ### COMMIT
        result='failed'
        pushd "${repo_root_path}" &> /dev/null
        echo -e "\n*** Commit changes in unmanic-plugins repository"
        commit_message="[${plugin_id}] v${plugin_version}"
        echo ${commit_message}
        git add "source/${plugin_id}"
        git commit -m "${commit_message}"
        if [[ $? -gt 0 ]]; then
            echo
            echo "No commit created. Possibly because there was nothing to commit!"
            echo "PR branch will not be pushed." 
            exit 1
        fi
        popd &> /dev/null

        # Mark successful
        echo "result=success" >> $GITHUB_OUTPUT

    # If a PR branch was created, force push branch to dest repo
    - name: Push PR branch
      if: steps.execute.outputs.result == 'success'
      shell: bash
      run: |
        git config -l | grep 'http\..*\.extraheader' | cut -d= -f1 | xargs -L1 git config --unset-all
        git push -f https://token:${GH_TOKEN}@github.com/${{ inputs.dst_repo }}.git "pr-${{ steps.prepare.outputs.plugin_id }}"
        # Add a small sleep here before running completing this job
        sleep 2
      env:
        GH_TOKEN: "${{ inputs.github_token }}"

    # If a PR branch was created, open a PR (if one is not already open)
    - name: Generate PR
      if: steps.execute.outputs.result == 'success'
      shell: bash
      run: |
        # Configure the source workflow link
        workflow_run_link="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        # Execute the 'gh pr create' command and exit quietly without error if the command fails
        gh pr create \
          --title "[${{ steps.prepare.outputs.plugin_id }}] v${{ steps.prepare.outputs.plugin_version }}" \
          --body "PR automatically generated from [plugin source workflow](${workflow_run_link})" \
          --base "${{ inputs.dst_branch_name }}" \
          --head "pr-${{ steps.prepare.outputs.plugin_id }}" \
          --repo "${{ inputs.dst_repo }}" || true
      env:
        GITHUB_TOKEN: "${{ inputs.github_token }}"
